/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    behaviors {
        #include "macros.dtsi"
    #include "version.dtsi"

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick_tap_ms = <175>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        kp_tog: kp_tog {
            compatible = "zmk,behavior-hold-tap";
            label = "KP_TOG";
            bindings = <&kp>, <&tog>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
        };

        hold_layer: hold_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_LAYER";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "balanced";
        };

        dbl_tap_sym: dbl_tap_sym {
            compatible = "zmk,behavior-tap-dance";
            label = "DBL_TAP_SYM";
            #binding-cells = <0>;
            bindings = <&mo 5>, <&tog 5>;

            tapping-term-ms = <175>;
        };

        dbl_tap_lshft_caps: dbl_tap_lshft_caps {
            compatible = "zmk,behavior-tap-dance";
            label = "DBL_TAP_LSHFT_CAPS";
            #binding-cells = <0>;
            bindings = <&sk LEFT_SHIFT>, <&caps_word>;
        };

        dbl_tap_np: dbl_tap_np {
            compatible = "zmk,behavior-tap-dance";
            label = "DBL_TAP_NP";
            #binding-cells = <0>;
            bindings = <&mo 1>, <&tog 1>;

            tapping-term-ms = <175>;
        };

        tap_sqt: tap_sqt {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_SQT";
            #binding-cells = <0>;
            bindings = <&kp SINGLE_QUOTE>, <&in_sqt>;
        };

        tap_dqt: tap_dqt {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DQT";
            #binding-cells = <0>;
            bindings = <&kp DOUBLE_QUOTES>, <&in_dqt>;
        };

        tap_par: tap_par {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_PAR";
            #binding-cells = <0>;
            bindings = <&kp LEFT_PARENTHESIS>, <&in_paren>;
        };

        tap_brkt: tap_brkt {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_BRKT";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET>, <&in_brkt>;
        };

        tap_brace: tap_brace {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_BRACE";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACE>, <&in_brace>;
        };

        tap_lt: tap_lt {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_LT";
            #binding-cells = <0>;
            bindings = <&kp LESS_THAN>, <&in_lt>;
        };

        dbl_tap_rshift_caps: dbl_tap_rshift_caps {
            compatible = "zmk,behavior-tap-dance";
            label = "DBL_TAP_RSHIFT_CAPS";
            #binding-cells = <0>;
            bindings = <&sk RIGHT_SHIFT>, <&caps_word>;
        };

        mod_lt_dbl_tap: mod_lt_dbl_tap {
            compatible = "zmk,behavior-mod-morph";
            label = "MOD_LT_DBL_TAP";
            bindings = <&kp COMMA>, <&tap_lt>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    macros {
        paste: paste {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(INS)>;
            label = "PASTE";
        };

        arrow: arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GREATER_THAN>;
            label = "ARROW";
        };

        fnarrow: fnarrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp GREATER_THAN>;
            label = "FNARROW";
        };

        goequal: goequal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COLON &kp EQUAL>;
            label = "GOEQUAL";
        };

        in_brkt: in_brkt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET &kp RIGHT_BRACKET &kp LEFT_ARROW>;
            label = "IN_BRKT";
        };

        in_brace: in_brace {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACE &kp RIGHT_BRACE &kp LEFT_ARROW>;
            label = "IN_BRACE";
        };

        in_paren: in_paren {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_PARENTHESIS &kp RIGHT_PARENTHESIS &kp LEFT_ARROW>;
            label = "IN_PAREN";
        };

        in_dqt: in_dqt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOUBLE_QUOTES &kp DOUBLE_QUOTES &kp LEFT_ARROW>;
            label = "IN_DQT";
        };

        in_sqt: in_sqt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SINGLE_QUOTE &kp SINGLE_QUOTE &kp LEFT_ARROW>;
            label = "IN_SQT";
        };

        in_lt: in_lt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LESS_THAN &kp GREATER_THAN &kp LEFT_ARROW>;
            label = "IN_LT";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp EQUAL            &kp N1          &kp N2      &kp N3            &kp N4       &kp N5  &kp LA(F4)                                                   &mo 3      &kp N6  &kp N7          &kp N8        &kp N9           &kp N0                  &kp MINUS
&kp TAB              &kp Q           &kp W       &kp E             &kp R        &kp T   &kp LG(LS(S))                                                &kp F5     &kp Y   &kp U           &kp I         &kp O            &kp P                   &kp BSLH
&kp ESCAPE           &hm LEFT_GUI A  &hm LALT S  &hm LEFT_SHIFT D  &hm LCTRL F  &kp G   &kp LS(INSERT)  &mo 1    &mo 2         &mo 5      &mo 5      &kp LC(C)  &kp H   &hm RCTRL J     &hm RSHIFT K  &hm RIGHT_ALT L  &hm LEFT_WIN SEMICOLON  &tap_sqt
&dbl_tap_lshft_caps  &kp Z           &kp X       &kp C             &kp V        &kp B                            &kp HOME      &kp PG_UP                        &kp N   &kp M           &kp COMMA     &kp DOT          &kp FSLH                &dbl_tap_rshift_caps
&mo 2                &kp GRAVE       &none       &kp LEFT          &kp RIGHT            &kp BSPC        &kp DEL  &kp END       &kp PG_DN  &kp ENTER  &kp SPACE          &kp DOWN_ARROW  &kp UP_ARROW  &tap_brkt        &kp RBKT                &mo 2
            >;
        };

        layer_keypad {
            bindings = <
&kp EQUAL  &kp N1     &kp N2  &kp N3    &kp N4     &kp N5  &trans                                                 &mo 3         &kp N6  &kp KP_NUM    &kp EQUAL     &kp KP_DIVIDE  &kp KP_MULTIPLY  &kp MINUS
&kp TAB    &kp Q      &kp W   &kp E     &kp R      &kp T   &none                                                  &none         &kp Y   &kp NUMBER_7  &kp NUMBER_8  &kp N9         &kp KP_MINUS     &kp BSLH
&kp ESC    &kp A      &kp S   &kp D     &kp F      &kp G   &none     &trans   &kp LALT      &kp LGUI   &trans     &none         &kp H   &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6   &kp KP_PLUS      &kp SQT
&trans     &kp Z      &kp X   &kp C     &kp V      &kp B                      &kp HOME      &kp PG_UP                           &kp N   &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3   &kp KP_ENTER     &kp RSHFT
&mo 2      &kp GRAVE  &none   &kp LEFT  &kp RIGHT          &kp BSPC  &kp DEL  &kp END       &kp PG_DN  &kp ENTER  &kp NUMBER_0          &kp UP        &kp DOWN      &kp KP_DOT     &kp RBKT         &mo 2
            >;
        };

        layer_fn {
            bindings = <
&kp F1  &kp F2  &kp F3  &kp F4                &kp F5                &kp F6  &tog 1                                               &mo 3   &kp F7  &kp F8             &kp F9            &kp F10     &kp F11  &kp F12
&trans  &trans  &trans  &trans                &trans                &trans  &none                                                &none   &trans  &trans             &trans            &trans      &trans   &trans
&trans  &trans  &trans  &trans                &trans                &trans  &trans  &trans  &trans               &trans  &trans  &none   &trans  &kp C_PREVIOUS     &kp C_PLAY_PAUSE  &kp C_NEXT  &trans   &trans
&trans  &trans  &trans  &trans                &trans                &trans                  &kp PAUSE_BREAK      &trans                  &trans  &kp C_MUTE         &trans            &trans      &trans   &trans
&trans  &trans  &tog 4  &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC          &trans  &trans  &kp PRINTSCREEN      &trans  &trans  &trans          &kp C_VOLUME_DOWN  &kp C_VOLUME_UP   &trans      &trans   &trans
            >;
        };

        layer_mod {
            bindings = <
&none   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none                                                             &trans                  &none  &none       &none       &none  &none  &none
&none   &none         &none         &none         &none         &none         &bootloader                                                       &bootloader             &none  &none       &none       &none  &none  &none
&none   &none         &none         &none         &none         &none         &rgb_ug RGB_MEFS_CMD 5  &none  &none      &bt BT_CLR  &none       &rgb_ug RGB_MEFS_CMD 5  &none  &none       &none       &none  &none  &none
&trans  &none         &none         &none         &none         &none                                        &none      &none                                           &none  &none       &none       &none  &none  &none
&none   &none         &none         &none         &none                       &none                   &none  &none      &none       &bl BL_TOG  &rgb_ug RGB_TOG                &bl BL_INC  &bl BL_DEC  &none  &none  &none
            >;
        };

        game {
            bindings = <
&trans          &trans  &trans  &trans  &trans  &trans  &trans                                                &trans  &trans  &trans  &trans  &trans  &trans         &trans
&trans          &trans  &trans  &trans  &trans  &trans  &trans                                                &trans  &trans  &trans  &trans  &trans  &trans         &trans
&kp ESCAPE      &kp A   &kp S   &kp D   &kp F   &trans  &kp BACKSPACE  &trans     &trans      &trans  &trans  &trans  &trans  &kp J   &kp K   &kp L   &kp SEMICOLON  &trans
&kp LEFT_SHIFT  &trans  &trans  &trans  &trans  &trans                            &trans      &trans                  &trans  &trans  &trans  &trans  &trans         &trans
&kp LCTRL       &trans  &trans  &trans  &trans          &kp SPACE      &kp LCTRL  &trans      &trans  &trans  &trans          &trans  &trans  &trans  &trans         &trans
            >;
        };

        symbol {
            bindings = <
&trans  &trans           &trans  &trans      &trans           &trans       &trans                                      &trans  &trans     &arrow         &fnarrow   &goequal           &kp MINUS              &kp EQUAL
&trans  &trans           &trans  &tap_brace  &kp RIGHT_BRACE  &trans       &trans                                      &trans  &kp GRAVE  &kp TILDE      &tap_brkt  &kp RIGHT_BRACKET  &kp UNDERSCORE         &kp PLUS
&trans  &kp EXCLAMATION  &kp AT  &kp HASH    &kp DOLLAR       &kp PERCENT  &trans  &trans  &trans      &trans  &trans  &trans  &kp CARET  &kp AMPERSAND  &kp STAR   &tap_par           &kp RIGHT_PARENTHESIS  &tap_dqt
&trans  &trans           &trans  &trans      &trans           &trans                       &trans      &trans                  &trans     &trans         &tap_lt    &kp GREATER_THAN   &trans                 &trans
&trans  &trans           &trans  &trans      &trans                        &trans  &trans  &trans      &trans  &trans  &trans             &trans         &trans     &trans             &trans                 &trans
            >;
        };
    };
};
