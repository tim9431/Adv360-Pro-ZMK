/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    behaviors {
        #include "macros.dtsi"
    #include "version.dtsi"

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick_tap_ms = <175>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        kp_tog: kp_tog {
            compatible = "zmk,behavior-hold-tap";
            label = "KP_TOG";
            bindings = <&kp>, <&tog>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
        };

        hold_layer: hold_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_LAYER";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "balanced";
        };

        dbl_tap_rctrl_sym: dbl_tap_rctrl_sym {
            compatible = "zmk,behavior-tap-dance";
            label = "DBL_TAP_RCTRL_SYM";
            #binding-cells = <0>;
            bindings = <&kp RCTRL>, <&mo 5>;
        };

        dbl_tap_lshft_caps: dbl_tap_lshft_caps {
            compatible = "zmk,behavior-tap-dance";
            label = "DBL_TAP_LSHFT_CAPS";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&caps_word>, <&kp CAPSLOCK>;
        };

        dbl_tap_lalt_np: dbl_tap_lalt_np {
            compatible = "zmk,behavior-tap-dance";
            label = "DBL_TAP_LALT_NP";
            #binding-cells = <0>;
            bindings = <&kp LEFT_ALT>, <&mo 1>;
        };
    };

    macros {
        paste: paste {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(INS)>;
            label = "PASTE";
        };

        arrow: arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GREATER_THAN>;
            label = "ARROW";
        };

        fnarrow: fnarrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp GREATER_THAN>;
            label = "FNARROW";
        };

        goequal: goequal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COLON &kp EQUAL>;
            label = "GOEQUAL";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp EQUAL            &kp N1          &kp N2      &kp N3            &kp N4       &kp N5  &tog 1                                                                    &mo 3      &kp N6  &kp N7          &kp N8        &kp N9           &kp N0                  &kp MINUS
&kp TAB              &kp Q           &kp W       &kp E             &kp R        &kp T   &mo 5                                                                     &none      &kp Y   &kp U           &kp I         &kp O            &kp P                   &kp BSLH
&kp ESCAPE           &hm LEFT_GUI A  &hm LALT S  &hm LEFT_SHIFT D  &hm LCTRL F  &kp G   &paste    &dbl_tap_lalt_np  &kp LCTRL      &kp LGUI   &dbl_tap_rctrl_sym  &none      &kp H   &hm RCTRL J     &hm RSHIFT K  &hm RIGHT_ALT L  &hm LEFT_WIN SEMICOLON  &kp SQT
&dbl_tap_lshft_caps  &kp Z           &kp X       &kp C             &kp V        &kp B                               &kp HOME       &kp PG_UP                                 &kp N   &kp M           &kp COMMA     &kp DOT          &kp FSLH                &kp RSHFT
&mo 2                &kp GRAVE       &none       &kp LEFT          &kp RIGHT            &kp BSPC  &kp DEL           &kp END        &kp PG_DN  &kp ENTER           &kp SPACE          &kp DOWN_ARROW  &kp UP_ARROW  &kp LBKT         &kp RBKT                &mo 2
            >;
        };

        layer_keypad {
            bindings = <
&kp EQUAL  &kp N1     &kp N2  &kp N3    &kp N4     &kp N5  &trans                                                 &mo 3      &kp N6  &kp KP_NUM  &kp EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &kp MINUS
&kp TAB    &kp Q      &kp W   &kp E     &kp R      &kp T   &none                                                  &none      &kp Y   &kp KP_N7   &kp KP_N8  &kp KP_N9      &kp KP_MINUS     &kp BSLH
&kp ESC    &kp A      &kp S   &kp D     &kp F      &kp G   &none     &trans   &kp LALT      &kp LGUI   &trans     &none      &kp H   &kp KP_N4   &kp KP_N5  &kp KP_N6      &kp KP_PLUS      &kp SQT
&trans     &kp Z      &kp X   &kp C     &kp V      &kp B                      &kp HOME      &kp PG_UP                        &kp N   &kp KP_N1   &kp KP_N2  &kp KP_N3      &kp KP_ENTER     &kp RSHFT
&mo 2      &kp GRAVE  &none   &kp LEFT  &kp RIGHT          &kp BSPC  &kp DEL  &kp END       &kp PG_DN  &kp ENTER  &kp KP_N0          &kp UP      &kp DOWN   &kp KP_DOT     &kp RBKT         &mo 2
            >;
        };

        layer_fn {
            bindings = <
&kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6  &tog 1                                               &mo 3   &kp F7  &kp F8             &kp F9           &kp F10  &kp F11  &kp F12
&trans  &trans  &trans  &trans  &trans  &trans  &none                                                &none   &trans  &trans             &trans           &trans   &trans   &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans               &trans  &trans  &none   &trans  &trans             &trans           &trans   &trans   &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &kp PAUSE_BREAK      &trans                  &trans  &trans             &trans           &trans   &trans   &trans
&trans  &trans  &tog 4  &trans  &trans          &trans  &trans  &kp PRINTSCREEN      &trans  &trans  &trans          &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &trans   &trans   &trans
            >;
        };

        layer_mod {
            bindings = <
&none   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none                                                             &trans                  &none  &none       &none       &none  &none  &none
&none   &none         &none         &none         &none         &none         &bootloader                                                       &bootloader             &none  &none       &none       &none  &none  &none
&none   &none         &none         &none         &none         &none         &rgb_ug RGB_MEFS_CMD 5  &none  &none      &bt BT_CLR  &none       &rgb_ug RGB_MEFS_CMD 5  &none  &none       &none       &none  &none  &none
&trans  &none         &none         &none         &none         &none                                        &none      &none                                           &none  &none       &none       &none  &none  &none
&none   &none         &none         &none         &none                       &none                   &none  &none      &none       &bl BL_TOG  &rgb_ug RGB_TOG                &bl BL_INC  &bl BL_DEC  &none  &none  &none
            >;
        };

        game {
            bindings = <
&trans          &trans  &trans  &trans  &trans  &trans  &trans                                            &trans  &trans  &trans  &trans  &trans  &trans         &trans
&trans          &trans  &trans  &trans  &trans  &trans  &trans                                            &trans  &trans  &trans  &trans  &trans  &trans         &trans
&kp ESCAPE      &kp A   &kp S   &kp D   &kp F   &trans  &trans     &trans     &trans      &trans  &trans  &trans  &trans  &kp J   &kp K   &kp L   &kp SEMICOLON  &trans
&kp LEFT_SHIFT  &trans  &trans  &trans  &trans  &trans                        &trans      &trans                  &trans  &trans  &trans  &trans  &trans         &trans
&trans          &trans  &trans  &trans  &trans          &kp SPACE  &kp LCTRL  &trans      &trans  &trans  &trans          &trans  &trans  &trans  &trans         &trans
            >;
        };

        symbol {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                      &trans  &arrow           &kp PLUS        &fnarrow              &goequal               &kp EXCLAMATION  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                      &trans  &kp GRAVE        &kp EQUAL       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp MINUS        &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &kp EXCLAMATION  &kp LEFT_BRACE  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp RIGHT_BRACE  &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans      &trans                  &kp TILDE        &kp UNDERSCORE  &trans                &trans                 &trans           &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans      &trans  &trans  &trans                   &trans          &trans                &trans                 &trans           &trans
            >;
        };
    };
};
